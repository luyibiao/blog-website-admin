@import './variable.scss';

//窗口默认字体大小
$browser-default-font-size: 10px !default;
//是否兼容ie
// $ie: false;

//行内块盒子
@mixin inlineBox($display: inline-block, $width: 100%, $height: 100%) {
  display: $display;
  width: $width;
  height: $height;
}

// 绝对定位
@mixin position($fn:position, $top: 0, $right: 0, $bottom: 0, $left: 0) {
    @if $fn {
        position: $fn;
    }
    @if $top {
        top: $top;
    }
    @if $right {
        right: $right;
    }
    @if $bottom {
        bottom: $bottom;
    }
    @if $left {
        left: $left;
    }
}

@mixin setPosition ($position: center, $top: 0, $right: 0, $bottom: 0, $left: 0, $position-box: absolute) {
    position: $position-box;
    @if $position == center {
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }
    @else if $position == x-center {
      top: $top;
      left: 50%;
      transform: translateX(-50%);
    }
    @else if $position == y-center {
      top: 50%;
      transform: translateY(-50%);
    }
    @else if $position == inherit {
      top: $top;
      left: $left;
      bottom: $bottom;
      right: $right;
    }
    @else if $position == left {
      top: $top;
      left: $left;
    }
    @else if $position == right {
      top: $top;
      right: $right;
    }
    @else if $position == custom {
      @content;
    }
    @content;
  }

  @mixin setBg($bg: #fff, $fc: $main-black) {
      background: $bg;
      color: $fc;
      @content;
  }

//弹性盒子相关:
//$direction: 取值范围如下:
//	row： 主轴与行内轴方向作为默认的书写模式。即横向从左到右排列（左对齐）。
//	row-reverse： 对齐方式与row相反。
//	column： 主轴与块轴方向作为默认的书写模式。即纵向从上往下排列（顶对齐）。
//	column-reverse： 对齐方式与column相反。
// 主轴为'direction'时的水平垂直居中
@mixin flex-center($direction: row) {
    display: flex;
    align-items: center;
    justify-content: center;
    @if $direction {
        flex-direction: $direction;
    }
}

// 主轴为'direction'时,垂直居中,水平方向两端对齐
@mixin flex-between($direction: row) {
    display: flex;
    align-items: center;
    justify-content: space-between;
    @if $direction {
        flex-direction: $direction;
    }
}

// 主轴为'direction'时,垂直居中,水平方向平均分布
@mixin flex-around($direction: row) {
    display: flex;
    align-items: center;
    justify-content: space-around;
    @if $direction {
        flex-direction: $direction;
    }
}

// 清除浮动
@mixin clear-float {
    /* for IE6 IE7 */
    zoom: 1;
    &:after {
        visibility: hidden;
        display: block;
        font-size: 0;
        content: " ";
        clear: both;
        height: 0;
    }
}

// 背景图片
// auto： 背景图像的真实大小。 
// cover： 将背景图像等比缩放到完全覆盖容器，背景图像有可能超出容器。 
// contain： 将背景图像等比缩放到宽度或高度与容器的宽度或高度相等，背景图像始终被包含在容器内。
@mixin background-img($url: false, $size: cover) {
    background-repeat: no-repeat;
    background-attachment: scroll;
    background-position: center center;
    background-size: $size;
    @if $url {
        background-image: url($url);
    }
}

// 单行文本省略号...
@mixin ellipsis-single {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
}

// 多行文本省略号...
@mixin ellipsis-multi ($num: 2) {
    display: -webkit-box;
    overflow: hidden;
    text-overflow: ellipsis;
    word-break: break-all;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $num;
}

// 文字两端对齐
@mixin text-justify {
    text-align: justify;
    text-justify: inter-ideograph;
}

// 强制换行
@mixin toWrap {
    /* 只对英文起作用，以字母作为换行依据。 */
    word-break: break-all;
    /* 只对英文起作用，以单词作为换行依据。*/
    word-wrap: break-word;
    /* 只对中文起作用，强制换行。*/
    white-space: pre-wrap;
}
// 强制不换行
@mixin noWrap {
    /* 只对英文起作用，以字母作为换行依据。 */
    word-break: normal;
    /* 只对英文起作用，以单词作为换行依据。*/
    word-wrap: normal;
    /* 只对中文起作用，强制换行。*/
    white-space: nowrap;
}

//阴影
//x轴方向 y轴方向 模糊距离  阴影颜色
@mixin shadow-base($x:0px, $y:-4px, $b:4px, $c:rgba(0, 0, 0, 0.05)) {
    box-shadow: $x $y $b $c;
}

//盒子大小
@mixin size($width:100%, $height:100%) {
    @if $width {
        width: $width;
    }
    @if $height {
        height: $height;
    }
}

//边框相关
//默认边框
@mixin borderBase($height:1px, $style:solid, $color:#DDD) {
    border: $height $style $color;
}

//圆角边框
@mixin borderRadius($radius:5px) {
    border-radius: $radius;
}
// 滚动盒子样式重置
@mixin scrollbar {
    /*滚动条样式重置*/
    &::-webkit-scrollbar { 
        width: 6px; 
        height: 6px;
    } 
    /*定义滚动条轨道 内阴影+圆角*/ 
    &::-webkit-scrollbar-track { 
        background-color: inherit; 
    }  
    &:hover::-webkit-scrollbar-thumb { 
        border-radius: 6px; 
        background-color: #C6CCD7; 
    }
    /*定义滑块 内阴影+圆角*/ 
    &::-webkit-scrollbar-thumb { 
        background-color: inherit; 
    }
}

//rem计算
/*
//SCSS .wrapper { 
    @include remCalc(width,45); 
    @include remCalc(margin,1,.5,2,3); 
} 
//CSS 
.wrapper { 
    width: 720px; width: 45rem; 
    margin: 16px 8px 32px 48px; 
    margin: 1rem 0.5rem 2rem 3rem; 
}
*/

//去掉数值的单位
@function strip-units($number){
    @return $number / ($number * 0 + 1);
}
@mixin remCalc($property, $values...) { 
    //返回$values列表的长度值 
    $max: length($values);
    $pxValues: ''; 
    $remValues: ''; 
    @for $i from 1 through $max { 
        //返回$values列表中的第$i个值，并将单位值去掉 
        $value: strip-units(nth($values, $i));
        $browser-default-font-size: strip-units($browser-default-font-size); 
        $pxValues: #{$pxValues + $value * $browser-default-font-size}px; 
        @if $i < $max {
            $pxValues: #{$pxValues + " "}; 
        } 
    } 
    @for $i from 1 through $max {
         $value: strip-units(nth($values, $i)); 
         $remValues: #{$remValues + $value}rem; 
         @if $i < $max {
            $remValues: #{$remValues + " "}; 
        } 
    }   
    #{$property}: $remValues; 
}